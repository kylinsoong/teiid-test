<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="MatViewH2VDB" version="1">
	<description>Teiid Perf VDB</description>
	
	<!-- 
      Setting to use connector supplied metadata. Can be "true" or "cached".  
      "true" will obtain metadata once for every launch of Teiid. 
      "cached" will save a file containing the metadata into 
      the deploy/<vdb name>/<vdb version/META-INF directory
    -->
    <property name="UseConnectorMetadata" value="true" />

    <!-- 
      Each model represents a access to one or more sources.
      The name of the model will be used as a top level schema name
      for all of the metadata imported from the connector.
    
      NOTE: Multiple models, with different import settings, can be bound to 
      the same connector binding and will be treated as the same source at
      runtime. 
    --> 
    <model name="MarketData">
        <!-- 
            Each source represents a translator and data source. There are 
            pre-defined translators, or you can create one.
        -->
        <source name="text-connector" translator-name="file" connection-jndi-name="java:/marketdata-file"/>
    </model>

    <model name="Accounts">
        <!-- 
          JDBC Import settings 
          
          importer.useFullSchemaName directs the importer to drop the source 
          schema from the Teiid object name, so that the Teiid fully qualified name
          will be in the form of <model name>.<table name>
        -->
        <property name="importer.useFullSchemaName" value="false"/>
           
         <!--
            This connector is defined to reference the H2 localDS" 
          -->
        <source name="h2-connector" translator-name="translator-h2" connection-jndi-name="java:/accounts-ds"/>
    </model>
    
    
    <model name="Stocks" type="VIRTUAL">
        <metadata type="DDL"><![CDATA[
                
        CREATE VIEW StockPrices (
            symbol string,
            price bigdecimal
            )
            AS  
               SELECT SP.symbol, SP.price
                FROM (EXEC MarketData.getTextFiles('*.txt')) AS f, 
                    TEXTTABLE(f.file COLUMNS symbol string, price bigdecimal HEADER) AS SP;
        
        
        CREATE VIEW Stock (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
            )
            AS
                SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;

                 
        ]]> </metadata>
    </model>
    
    <model name="StocksMatModel" type="VIRTUAL">
                <metadata type="DDL"><![CDATA[
        CREATE view stockPricesMatView
                (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
                ) OPTIONS (MATERIALIZED 'TRUE', UPDATABLE 'TRUE',         
               MATERIALIZED_TABLE 'Accounts.h2_stock_mat', 
               "teiid_rel:MATVIEW_TTL" 30000,
               "teiid_rel:MATVIEW_BEFORE_LOAD_SCRIPT" 'execute accounts.native(''truncate table mat_stock_staging'');',
               "teiid_rel:MATVIEW_AFTER_LOAD_SCRIPT"  'execute accounts.native(''ALTER TABLE h2_stock_mat RENAME TO h2_stock_mat_temp'');execute accounts.native(''ALTER TABLE mat_stock_staging RENAME TO h2_stock_mat'');execute accounts.native(''ALTER TABLE h2_stock_mat_temp RENAME TO mat_stock_staging'');', 
               "teiid_rel:ON_VDB_DROP_SCRIPT" 'DELETE FROM Accounts.status WHERE Name=''stockPricesMatView'' AND schemaname = ''StocksMatModel''',
               "teiid_rel:MATERIALIZED_STAGE_TABLE" 'Accounts.mat_stock_staging',
               "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
               "teiid_rel:MATVIEW_STATUS_TABLE" 'status', 
               "teiid_rel:MATVIEW_SHARE_SCOPE" 'NONE',
               "teiid_rel:MATVIEW_ONERROR_ACTION" 'THROW_EXCEPTION')
                AS SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;
        ]]>
                </metadata>
        </model>
        
        <model name="StocksInterMatModel" type="VIRTUAL">
                <metadata type="DDL"><![CDATA[
        CREATE view stockPricesInterMatView
                (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
                ) OPTIONS (materialized true,         
               "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
               "teiid_rel:MATVIEW_PREFER_MEMEORY" 'true',
               "teiid_rel:MATVIEW_TTL" 300000,
               "teiid_rel:MATVIEW_UPDATABLE" 'true', 
               "teiid_rel:MATVIEW_SCOPE" 'VDB')
               AS SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A WHERE S.symbol = A.SYMBOL;
        ]]>
                </metadata>
        </model>
        
        <model name="StocksProcedureModel" type="VIRTUAL">
                <metadata type="DDL"><![CDATA[
        CREATE VIRTUAL PROCEDURE loadMatViewTest(IN schemaName string NOT NULL, IN viewName string NOT NULL, IN invalidate boolean NOT NULL DEFAULT 'false') RETURNS integer
		AS
		BEGIN
		    
		    DECLARE string vdbName = (SELECT Name FROM SYS.VirtualDatabases);
            DECLARE integer vdbVersion = (SELECT convert(Version, integer) FROM SYS.VirtualDatabases);
            DECLARE string uid = (SELECT UID FROM Sys.Tables WHERE VDBName = VARIABLES.vdbName AND SchemaName = loadMatViewTest.schemaName AND Name = loadMatViewTest.viewName);
			DECLARE integer rowsUpdated = 0;
			
            IF (uid IS NULL)
            BEGIN
                    RAISE SQLEXCEPTION 'The view not found';
            END
   
            DECLARE boolean isMaterialized = (SELECT IsMaterialized FROM SYS.Tables WHERE UID = VARIABLES.uid);
 
            IF (NOT isMaterialized)
            BEGIN
                    RAISE SQLEXCEPTION 'The view is not declared as Materialized View in Metadata';
            END

            DECLARE string statusTable = (SELECT "Value" from SYS.Properties WHERE UID = VARIABLES.uid AND Name = '{http://www.teiid.org/ext/relational/2012}MATVIEW_STATUS_TABLE');
        
            IF (statusTable IS NULL)
			BEGIN
			    DECLARE string interViewName = loadMatViewTest.schemaName || '.' || loadMatViewTest.viewName;
			    rowsUpdated = (EXECUTE SYSADMIN.refreshMatView(VARIABLES.interViewName, loadMatViewTest.invalidate));
			    EXECUTE logMsg('ERROR', 'org.teiid.MATVIEWS.TEST', 'loadMatViewTest go into internal Mat');
			    EXECUTE logMsg('ERROR', 'org.teiid.MATVIEWS.TEST', rowsUpdated);
			    RETURN rowsUpdated;
			END 
			
			EXECUTE logMsg('ERROR', 'org.teiid.MATVIEWS.TEST', 'loadMatViewTest go into external Mat');
			RETURN 100;
        END
        ]]>
                </metadata>
        </model>
</vdb>