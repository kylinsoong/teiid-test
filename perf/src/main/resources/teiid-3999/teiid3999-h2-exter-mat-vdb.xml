<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="ExternalMatViewH2VDB" version="1">
	<description>Teiid Perf VDB</description>
	
	<property name="UseConnectorMetadata" value="true" />
	<model name="Accounts">
		<property name="importer.useFullSchemaName" value="false" />
		<source name="h2-connector" translator-name="translator-h2" connection-jndi-name="java:/accounts-ds" />
	</model>
	
	<model name="TestExterMat" type="VIRTUAL">
		<metadata type="DDL"><![CDATA[
		
		CREATE VIEW SAMPLEEXTERMATVIEW (
		  id varchar,
		  a varchar,
		  b varchar,
		  c varchar,
		  PRIMARY KEY (id, a, b)
		) OPTIONS (MATERIALIZED 'TRUE', UPDATABLE 'TRUE',         
               MATERIALIZED_TABLE 'Accounts.SampleTable_mat', 
               "teiid_rel:MATVIEW_TTL" 60000,
               "teiid_rel:MATVIEW_BEFORE_LOAD_SCRIPT" 'execute accounts.native(''truncate table SampleTable_staging'');',
               "teiid_rel:MATVIEW_AFTER_LOAD_SCRIPT"  'execute accounts.native(''ALTER TABLE SampleTable_mat RENAME TO SampleTable_mat_temp'');execute accounts.native(''ALTER TABLE SampleTable_staging RENAME TO SampleTable_mat'');execute accounts.native(''ALTER TABLE SampleTable_mat_temp RENAME TO SampleTable_staging'');', 
               "teiid_rel:ON_VDB_DROP_SCRIPT" 'DELETE FROM Accounts.status WHERE Name=''SAMPLEEXTERMATVIEW'' AND schemaname = ''TestExterMat''',
               "teiid_rel:MATERIALIZED_STAGE_TABLE" 'Accounts.SampleTable_staging',
               "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
               "teiid_rel:MATVIEW_STATUS_TABLE" 'status', 
               "teiid_rel:MATVIEW_SHARE_SCOPE" 'NONE',
               "teiid_rel:MATVIEW_ONERROR_ACTION" 'THROW_EXCEPTION'
		)
		AS
		SELECT A.id, A.a, A.b, A.c FROM Accounts.SampleTable AS A;
		
		
		]]>
		</metadata>
	</model>
	
	<model name="TestMatProc" type="VIRTUAL">
		<metadata type="DDL"><![CDATA[
		
CREATE VIRTUAL PROCEDURE testupdateMatView(IN schemaName string NOT NULL, IN viewName string NOT NULL, IN refreshCriteria string) RETURNS integer
AS
BEGIN
    
    DECLARE string KeyUID = (SELECT UID FROM SYS.Keys WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND Type = 'Primary');
    
    IF (KeyUID IS NULL)
    BEGIN
        RAISE SQLEXCEPTION 'no primary key defined';
    END
    
    DECLARE string pkcolums ;
    DECLARE boolean isFirstPKCol = true;
    
    LOOP ON (SELECT Name FROM SYS.KeyColumns WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND UID = VARIABLES.KeyUID) AS colname
    BEGIN
        IF (isFirstPKCol)
        BEGIN
            isFirstPKCol = false;
            pkcolums = colname.Name;
        END ELSE
        BEGIN
            pkcolums = pkcolums || ', ' || colname.Name;
        END
    END
    
    pkcolums = '(' || pkcolums || ')';
    
    DECLARE string interViewName = testupdateMatView.schemaName || '.' || testupdateMatView.viewName;
    DECLARE integer interRowsUpdated = 0;
    
    EXECUTE IMMEDIATE 'SELECT ' || VARIABLES.pkcolums || ' FROM ' || VARIABLES.interViewName || ' WHERE ' || testupdateMatView.refreshCriteria AS PrimaryKey object[] INTO #pklist;
    
    LOOP ON (SELECT PrimaryKey FROM #pklist) AS pkrow
    BEGIN
        
        EXECUTE logMsg(context=>'org.ksoong.test.110', level=>'ERROR', msg=>pkrow.PrimaryKey);
    END  
END		
		
		]]>
		</metadata>
	</model>
	
	<!-- 
	interRowsUpdated = (EXECUTE SYSADMIN.refreshMatViewRows(VARIABLES.interViewName, pkrow.PrimaryKey));
	 pkcolums = '(' || pkcolums || ')' || ' AS pkArray ';
    
    DECLARE string loopSelect = 'SELECT ' || VARIABLES.pkcolums || 'FROM ' || testupdateMatView.schemaName || '.' || testupdateMatView.viewName || ' WHERE ' || testupdateMatView.refreshCriteria;
    DECLARE string loopWhere = ' ' || testupdateMatView.schemaName || '.' || testupdateMatView.viewName || ' WHERE ' || testupdateMatView.refreshCriteria;
    
    EXECUTE logMsg(context=>'org.ksoong.test.110', level=>'ERROR', msg=>loopWhere);
    
    DECLARE string interViewName = testupdateMatView.schemaName || '.' || testupdateMatView.viewName;
    
    DECLARE string[] pkArray = (SELECT VARIABLES.pkcolums FROM DVARS.interViewName WHERE testupdateMatView.refreshCriteria);
    
	LOOP ON ('SELECT ' || VARIABLES.pkcolums || ' FROM ' || testupdateMatView.schemaName || '.' || testupdateMatView.viewName || ' ' || testupdateMatView.refreshCriteria) AS pkResults
    BEGIN
        EXECUTE logMsg(context=>'org.ksoong.test.110', level=>'ERROR', msg=>pkResults.pkArray);
    END
	 -->
	
</vdb>