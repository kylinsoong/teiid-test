<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="InternalMatViewH2VDB" version="1">

	<description>Teiid Internal Mat</description>
	
	<property name="UseConnectorMetadata" value="true" />
	<model name="Accounts">
		<property name="importer.useFullSchemaName" value="false" />
		<source name="mysql-connector" translator-name="translator-h2" connection-jndi-name="java:/accounts-ds" />
	</model>
	
	<!--  -->
	<model name="TestInterMat" type="VIRTUAL">
		<metadata type="DDL"><![CDATA[
		
		CREATE VIEW SAMPLEMATVIEW (
		  id varchar,
		  a varchar,
		  b varchar,
		  c varchar,
		  PRIMARY KEY (id, a, b)
		) OPTIONS (materialized true,
		    UPDATABLE 'TRUE',
			"teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
            "teiid_rel:MATVIEW_PREFER_MEMEORY" 'true',
            "teiid_rel:MATVIEW_TTL" 60000,
            "teiid_rel:MATVIEW_UPDATABLE" 'true', 
            "teiid_rel:MATVIEW_SCOPE" 'VDB'
		)
		AS
		SELECT A.id, A.a, A.b, A.c FROM Accounts.SampleTable AS A;
		
		
		]]>
		</metadata>
	</model>
	
	<model name="TestMatProc" type="VIRTUAL">
		<metadata type="DDL"><![CDATA[
		
		CREATE VIEW v1 ( col integer, col1 string, primary key (col) ) OPTIONS (MATERIALIZED true) AS /*+ cache(updatable) */ select 1, current_database();
		
CREATE VIRTUAL PROCEDURE testStringFunction(IN x string NOT NULL, IN y string NOT NULL, IN z string NOT NULL) RETURNS integer
AS
BEGIN
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', x || ' ' || y);
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', ASCII(x));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', CHR(72));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', CHAR(72));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', CONCAT(x, y));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', CONCAT2(x, y));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', ENDSWITH('llo', x));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', INITCAP(z));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', INSERT(x, 2, 0,y));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LCASE(z));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LEFT(x, 2));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LENGTH(x));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LOCATE('or', y));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LOCATE('or', y, 2));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LPAD(x, 10));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LPAD(x, 10, '-'));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LTRIM('    123 abc   '));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', QUERYSTRING('path', 'value' as "&x", ' & ' as y, null as z));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', REPEAT(x, 3));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', RIGHT(x, 2));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', RPAD(x, 10));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', RPAD(x, 10, '-'));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', RTRIM('    123 abc   '));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', SPACE(3));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', SUBSTRING(x, 3));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', SUBSTRING(x FROM 3));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', SUBSTRING(x, 3, 2));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', SUBSTRING(x FROM 3 FOR 2));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', TRANSLATE('12345', '02340', '*****'));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', TRIM(',' FROM ',(''100'', ''a0''),'));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', TRIM(BOTH ',' FROM ',(''100'', ''a0''),'));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', UCASE(x));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', UNESCAPE(x || ' ' || y));
    
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LOCATE(', ', 'adsadadsadad'));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LOCATE(', ', 'adsada, dsadad'));
    EXECUTE logMsg('WARN', 'org.teiid.testStringFunction', LOCATE(', ', 'adsada, dsa, dad'));
END	

CREATE VIRTUAL PROCEDURE testupdateMatView(IN schemaName string NOT NULL, IN viewName string NOT NULL, IN refreshCriteria string) RETURNS integer
AS
BEGIN
    
    DECLARE integer rowsUpdated = 0;
    DECLARE string vdbName = (SELECT Name FROM VirtualDatabases);
    DECLARE string vdbVersion = (SELECT Version  FROM VirtualDatabases);
    DECLARE string uid = (SELECT UID FROM Sys.Tables WHERE VDBName = VARIABLES.vdbName AND SchemaName = testupdateMatView.schemaName AND Name = testupdateMatView.viewName);
    
    DECLARE string statusTable = (SELECT "value" from SYS.Properties WHERE UID = VARIABLES.uid AND Name = '{http://www.teiid.org/ext/relational/2012}MATVIEW_STATUS_TABLE');
    
    IF (statusTable IS NULL)
    BEGIN
        DECLARE string KeyUID = (SELECT UID FROM SYS.Keys WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND Type = 'Primary');
        
        IF (KeyUID IS NULL)
        BEGIN
                RAISE SQLEXCEPTION 'no primary key defined';
        END
            
        DECLARE string pkcolums ;
        DECLARE boolean isFirstPKCol = true;
        DECLARE string interViewName = testupdateMatView.schemaName || '.' || testupdateMatView.viewName;
        
        
        LOOP ON (SELECT Name FROM SYS.KeyColumns WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND UID = VARIABLES.KeyUID) AS colname
        BEGIN
                IF (isFirstPKCol)
                BEGIN
                    isFirstPKCol = false;
                    pkcolums = testupdateMatView.viewName || '.' || colname.Name;
                END ELSE
                BEGIN
                    pkcolums = pkcolums || ', ' || testupdateMatView.viewName || '.' || colname.Name;
                END
            END

            IF (LOCATE(', ', pkcolums) <= 0)
            BEGIN
                pkcolums = pkcolums || ',';
            END

            pkcolums = '(' || pkcolums || ')';
            
            EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', pkcolums); 

            EXECUTE IMMEDIATE 'SELECT ' || VARIABLES.pkcolums || ' FROM ' || VARIABLES.interViewName || ' WHERE ' || testupdateMatView.refreshCriteria AS PrimaryKey object[] INTO #pklist;
			
			DECLARE integer interrowUpdated = 0;
			
            LOOP ON (SELECT PrimaryKey FROM #pklist) AS pkrow
            BEGIN
                interrowUpdated = (EXECUTE SYSADMIN.refreshMatViewRows(VARIABLES.interViewName, pkrow.PrimaryKey));
                IF (interrowUpdated > 0)
                BEGIN
                    rowsUpdated = rowsUpdated + interrowUpdated;
                END ELSE
                BEGIN
                    rowsUpdated = interrowUpdated;
                END
                EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', interrowUpdated);
                EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', pkrow.PrimaryKey);
            END
            EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', rowsUpdated);
            RETURN rowsUpdated;  
            
       END
       
       EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', '------------');   
    
    

END	
		
	
		
		]]>
		</metadata>
	</model>
	
	<!-- 
	
	CREATE VIRTUAL PROCEDURE testupdateMatView(IN schemaName string NOT NULL, IN viewName string NOT NULL, IN refreshCriteria string) RETURNS integer
AS
BEGIN
    
    DECLARE string KeyUID = (SELECT UID FROM SYS.Keys WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND Type = 'Primary');
    
    IF (KeyUID IS NULL)
    BEGIN
        RAISE SQLEXCEPTION 'no primary key defined';
    END
    
    DECLARE string pkcolums ;
    DECLARE boolean isFirstPKCol = true;
    
    LOOP ON (SELECT Name FROM SYS.KeyColumns WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND UID = VARIABLES.KeyUID) AS colname
    BEGIN
        IF (isFirstPKCol)
        BEGIN
            isFirstPKCol = false;
            pkcolums = colname.Name;
        END ELSE
        BEGIN
            pkcolums = pkcolums || ', ' || colname.Name;
        END
    END
    
    IF (LOCATE(', ', pkcolums) <= 0)
    BEGIN
        pkcolums = pkcolums || ','; 
    END 
    
    pkcolums = '(' || pkcolums || ')';
    
            EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', pkcolums);
    
    DECLARE string interViewName = testupdateMatView.schemaName || '.' || testupdateMatView.viewName;
    DECLARE integer interRowsUpdated = 0;
    
    EXECUTE IMMEDIATE 'SELECT ' || VARIABLES.pkcolums || ' FROM ' || VARIABLES.interViewName || ' WHERE ' || testupdateMatView.refreshCriteria AS PrimaryKey object[] INTO #pklist;
    
    LOOP ON (SELECT PrimaryKey FROM #pklist) AS pkrow
    BEGIN
        interRowsUpdated = (EXECUTE SYSADMIN.refreshMatViewRows(VARIABLES.interViewName, pkrow.PrimaryKey));
        EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', interRowsUpdated);
    END  
END	
	
	
	 -->
	
	<!-- 
	
	CREATE VIRTUAL PROCEDURE testupdateMatView(IN schemaName string NOT NULL, IN viewName string NOT NULL, IN refreshCriteria string) RETURNS integer
AS
BEGIN

    DECLARE integer lineCount  = 0;
    DECLARE integer index  = 1;
    
    declare string[] strings = tokenize(testupdateMatView.refreshCriteria, ',')
    VARIABLES.lineCount = array_length(strings);
    
    WHILE (index <= lineCount)
    BEGIN
        EXECUTE IMMEDIATE array_get(strings, index);
           index = index +1;
    END  
    
END	
	
	DECLARE string pkarrays = testupdateMatView.refreshCriteria;
    DECLARE string pkarray;
    DECLARE integer position  = -1;
    DECLARE string pkcolumnstr;
    DECLARE object pkcolumn;
	
	WHILE (LENGTH(pkarrays) > 0)
    BEGIN
        position = LOCATE('),', pkarrays);
        IF (position > 0)
        BEGIN
            pkarray = LEFT(pkarrays, position);
            pkarrays = SUBSTRING(pkarrays, position + 2, LENGTH(pkarrays) - position + 2);
        END ELSE
        BEGIN
            pkarray = pkarrays;
            pkarrays = '';
        END
        
        pkarray = TRIM(LEADING '(' FROM pkarray);
        pkarray = TRIM(TRAILING ')' FROM pkarray);
        position = -1;
        
        WHILE (LENGTH(pkarray) > 0)
        BEGIN
            position = LOCATE(',', pkarray);
            IF (position > 0)
	        BEGIN
	            pkcolumnstr = LEFT(pkarray, position);
	            pkarray = SUBSTRING(pkarray, position + 1, LENGTH(pkarray) - position + 1);
	        END ELSE
	        BEGIN
	            pkcolumnstr = pkarray;
	            pkarray = '';
	        END
	        pkcolumnstr = TRIM(BOTH ' ' FROM pkcolumnstr);
	        pkcolumnstr = TRIM(BOTH ',' FROM pkcolumnstr);
	        pkcolumn = pkcolumnstr;
	        EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', pkcolumn);
	        position = -1;
        END
        
        EXECUTE logMsg('WARN', 'org.teiid.testupdateMatView', '');
        
    END
	
	EXECUTE IMMEDIATE 'SELECT ' || VARIABLES.pkcolums || ' FROM ' || VARIABLES.interViewName || ' WHERE ' || testupdateMatView.refreshCriteria INTO #pklist;
	
	DECLARE string KeyUID = (SELECT UID FROM SYS.Keys WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND Type = 'Primary');
    
    IF (KeyUID IS NULL)
    BEGIN
        RAISE SQLEXCEPTION 'no primary key defined';
    END
    
    DECLARE string pkcolums ;
    DECLARE boolean isFirstPKCol = true;
    
    LOOP ON (SELECT Name FROM SYS.KeyColumns WHERE SchemaName = testupdateMatView.schemaName  AND TableName = testupdateMatView.viewName AND UID = VARIABLES.KeyUID) AS colname
    BEGIN
        IF (isFirstPKCol)
        BEGIN
            isFirstPKCol = false;
            pkcolums = colname.Name;
        END ELSE
        BEGIN
            pkcolums = pkcolums || ', ' || colname.Name;
        END
    END
    
    DECLARE string pkcolumsArray = '(' || pkcolums || ')' || ' AS pkArray ';
    
    DECLARE string interViewName = testupdateMatView.schemaName || '.' || testupdateMatView.viewName;
    DECLARE integer interRowsUpdated = 0;
    DECLARE string pkitems = 'c1 object, c2 object, c3 object';
    
    EXECUTE IMMEDIATE 'SELECT ' || VARIABLES.pkcolums || ' FROM ' || VARIABLES.interViewName || ' WHERE ' || testupdateMatView.refreshCriteria AS || VARIABLES.pkitems || INTO #pklist;
    
    LOOP ON (SELECT * FROM #pklist) AS pkrow
    BEGIN
        EXECUTE logMsg(context=>'org.ksoong.test.110', level=>'ERROR', msg=>'000');
    END  
	
	 -->
	
</vdb>