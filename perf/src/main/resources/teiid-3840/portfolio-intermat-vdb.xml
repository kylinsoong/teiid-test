<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vdb name="PortfolioInterMaterialize" version="1">

    <description>The Portfolio Dynamic VDB</description>
    
    <!-- 
      Setting to use connector supplied metadata. Can be "true" or "cached".  
      "true" will obtain metadata once for every launch of Teiid. 
      "cached" will save a file containing the metadata into 
      the deploy/<vdb name>/<vdb version/META-INF directory
    -->
    <property name="UseConnectorMetadata" value="true" />

    <!-- 
      Each model represents a access to one or more sources.
      The name of the model will be used as a top level schema name
      for all of the metadata imported from the connector.
    
      NOTE: Multiple models, with different import settings, can be bound to 
      the same connector binding and will be treated as the same source at
      runtime. 
    --> 
    <model name="MarketData">
        <!-- 
            Each source represents a translator and data source. There are 
            pre-defined translators, or you can create one.
        -->
        <source name="text-connector" translator-name="file" connection-jndi-name="java:/marketdata-file"/>
    </model>

    <model name="Accounts">
        <!-- 
          JDBC Import settings 
          
          importer.useFullSchemaName directs the importer to drop the source 
          schema from the Teiid object name, so that the Teiid fully qualified name
          will be in the form of <model name>.<table name>
        -->
        <property name="importer.useFullSchemaName" value="false"/>
           
         <!--
            This connector is defined to reference the H2 localDS" 
          -->
        <source name="h2-connector" translator-name="translator-h2" connection-jndi-name="java:/accounts-ds"/>
    </model>
    
    
    <model name="Stocks" type="VIRTUAL">
        <metadata type="DDL"><![CDATA[
                
        CREATE VIEW StockPrices (
            symbol string,
            price bigdecimal
            )
            AS  
               SELECT SP.symbol, SP.price
                FROM (EXEC MarketData.getTextFiles('*.txt')) AS f, 
                    TEXTTABLE(f.file COLUMNS symbol string, price bigdecimal HEADER) AS SP;
        
        
        CREATE VIEW Stock (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
            )
            AS
                SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;

                 
        ]]> </metadata>
    </model>
    
    <model name="StocksMatModel" type="VIRTUAL">
                <metadata type="DDL"><![CDATA[
        CREATE view stockPricesInterMatView
                (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
                ) OPTIONS (materialized true,         
               "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true', 
               "teiid_rel:MATVIEW_PREFER_MEMEORY" 'true',
               "teiid_rel:MATVIEW_TTL" 30000,
               "teiid_rel:MATVIEW_UPDATABLE" 'true', 
               "teiid_rel:MATVIEW_SCOPE" 'VDB')
               AS SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A WHERE S.symbol = A.SYMBOL;
        ]]>
                </metadata>
        </model>
    
    <model name="TmpModel" type="VIRTUAL">
                <metadata type="DDL"><![CDATA[
CREATE VIRTUAL PROCEDURE matViewsStatus_() RETURNS TABLE (VDBName varchar(255), SchemaName varchar(255), Name varchar(255), TargetSchemaName varchar(255), TargetName varchar(255), Valid boolean, LoadState varchar(255), Updated timestamp, Cardinality long) AS
BEGIN
        DECLARE string vdbName = (SELECT Name FROM VirtualDatabases);
        DECLARE integer vdbVersion = (SELECT convert(Version, integer) FROM VirtualDatabases);
        
        /*
          In current design, status table on the physical database, and used in any one of the source models
        */
		DECLARE string statusTable = (SELECT "Value" from SYS.Properties WHERE Name = '{http://www.teiid.org/ext/relational/2012}MATVIEW_STATUS_TABLE' LIMIT 1);
		
		IF (statusTable IS NULL)
		BEGIN
		    EXECUTE IMMEDIATE 'SELECT VDBName, SchemaName, Name, TargetSchemaName, TargetName, Valid, LoadState, Updated, Cardinality FROM SYSADMIN.MatViews' AS VDBName string, SchemaName string, Name string, TargetSchemaName string, TargetName string, Valid boolean, LoadState string, Updated timestamp, Cardinality long USING vdbName = VARIABLES.vdbName;
		END ELSE
		BEGIN
		   EXECUTE IMMEDIATE 'SELECT VDBName, SchemaName, Name, TargetSchemaName, TargetName, Valid, LoadState, Updated, Cardinality FROM ' || VARIABLES.statusTable AS VDBName string, SchemaName string, Name string, TargetSchemaName string, TargetName string, Valid boolean, LoadState string, Updated timestamp, Cardinality long USING vdbName = VARIABLES.vdbName, vdbVersion = VARIABLES.vdbVersion;
		END
END
        ]]>
                </metadata>
        </model>



</vdb>